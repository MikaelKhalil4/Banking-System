// <auto-generated />
using System;
using EventLogService.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventLogService.Persistence.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    partial class EventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventLogService.Domain.Entities.Eventlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_data");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("event_type_id");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("eventlogs_pkey");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("eventlog", (string)null);
                });

            modelBuilder.Entity("EventLogService.Domain.Entities.Eventtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("eventtypes_pkey");

                    b.HasIndex(new[] { "TypeName" }, "eventtypes_type_name_key")
                        .IsUnique();

                    b.ToTable("eventtype", (string)null);
                });

            modelBuilder.Entity("EventLogService.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("transactions_pkey");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("EventLogService.Domain.Entities.Eventlog", b =>
                {
                    b.HasOne("EventLogService.Domain.Entities.Eventtype", "EventType")
                        .WithMany("Eventlogs")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("eventlogs_event_type_id_fkey");

                    b.HasOne("EventLogService.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Eventlogs")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("eventlogs_transactions_id_fkey");

                    b.Navigation("EventType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("EventLogService.Domain.Entities.Eventtype", b =>
                {
                    b.Navigation("Eventlogs");
                });

            modelBuilder.Entity("EventLogService.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Eventlogs");
                });
#pragma warning restore 612, 618
        }
    }
}
